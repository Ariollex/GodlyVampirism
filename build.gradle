plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}



configurations {
    optionalRuntime
    runtime.extendsFrom optionalRuntime // optionalRuntime dependencies are downloaded but not exported to POM
}

version = project.minecraft_version + "-" + project.mod_version
group = "de.teamlapen.godlyvampirism" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "GodlyVampirism"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    //Maven repo for Vampirism
    maven {
        name = "MaxanierMaven"
        url = "https://maven.maxanier.de/releases"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven{
        //My custom location for (temp) local builds
        url = 'file://' + project.file('../../../.m2/repository').getAbsolutePath()
    }

}
dependencies {
    minecraft([
            group: "net.minecraftforge",
            name: "forge",
            version: "${project.minecraft_version}-${project.forge_version}"
    ])
    
    //compile against Vampirism. Version is taken from gradle.properties. We have to separate dependencies here, to trick gradle into not exporting the "_deobf" file name to pom
    compileOnly fg.deobf("de.teamlapen.vampirism:Vampirism:${vampirism_mcversion}-${vampirism_version}"){
        transitive = false
    }
    //
    runtimeOnly fg.deobf("de.teamlapen.vampirism:Vampirism:${vampirism_mcversion}-${vampirism_version}"){
        transitive = false
    }

}


minecraft {
    mappings channel: "${project.mcp_channel}".toString(), version: "${project.mcp_mappings}".toString()

    runs {
        client {
            taskName 'runClient1'
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', ''
            //property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run/client1').canonicalPath
            
            mods {
                "godly_vampirism" {
                    source sourceSets.main
                }
            }

        }
        server = {
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            //property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run/server').canonicalPath

            mods {
                'godly_vampirism' {
                    source sourceSets.main
                }


            }
        }
    }

}

//Replace strings in IDEA folders as well
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = ['version': project.mod_version, 'mcversion': minecraft_version, 'forge_version': forge_version, 'vampirism_version': vampirism_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
    exclude '**/Thumbs.db'

}

curseforge {
    if (project.hasProperty("CURSEFORGE_API")) {
        apiKey = project.CURSEFORGE_API
    } else {
        apiKey = "DUMMY"
    }
    project {
        id = "441422"
        releaseType = 'release'

        addGameVersion project.minecraft_version

        mainArtifact(jar) {
            displayName = "GodlyVampirism-${project.minecraft_version}-${project.mod_version}"
        }

        relations {
            requiredDependency 'vampirism-become-a-vampire'
        }

    }


}
